neoForge {
    version = libs.versions.neoforge.get()

    parchment {
        var parchmentData = libs.versions.parchment.get().split(',')
        minecraftVersion = parchmentData[0]
        mappingsVersion = parchmentData[1]
    }

    // This line is optional. Access Transformers are automatically detected
    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        // applies to all the run configs below
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }

        var isJbr = System.getProperty('java.vm.vendor').contains('JetBrains')

        client {
            client()
            if (isJbr) {
                jvmArgument "-XX:+AllowEnhancedClassRedefinition"
            }
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.archives_name
        }

        server {
            server()
            if (isJbr) {
                jvmArgument "-XX:+AllowEnhancedClassRedefinition"
            }
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.archives_name
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.archives_name
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.archives_name, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${archives_name}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

compileJava.options.encoding = 'UTF-8'

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : libs.versions.minecraft.get(),
            minecraft_version_range: minecraft_version_range,
            neo_version            : libs.versions.neoforge.get(),
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : archives_name,
            mod_version            : version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
